%%
% all lengths are in micrometer
NA=1.38; % numerical aperture
ri=1.518;% refractive index of immersion oil
lambda=.473; % emission vacuum wavelength
kxmax=NA/lambda; % radius of bfp for oil immersion objective
s=[256 256]; % image size
cosTheta=newim(s)+1;                  

klen=ri/lambda; % radius of ewald sphere

kx=xx(s,'freq')*4*kxmax;
ky=yy(s,'freq')*4*kxmax;              

tmp2=klen^2-(kx.^2+ky.^2);  
aperture=rr(s,'freq')*4*kxmax<kxmax; % sphere cap that contributes
cosTheta(aperture)=sqrt(tmp2(aperture));        
                    % Theta, being the angle to the optic axis
kz_of_kxky=cosTheta

%% prepare phase to propagate to different slices of the stack
nz=2; % number of slices
dz=1; % lambda/(2*(ri-sqrt(ri^2-NA^2))); % step size in um
z=xx(nz,'corner')*dz; % defocus in um
sxy=1/(2*kxmax); % um per pixel
vol=[s nz];
fpropmat=newim(vol,'dcomplex');
pupil=newim(s,'dcomplex');
for i=0:length(z)-1
    pupil(aperture)=exp(kz_of_kxky(aperture)*(.5*1i*klen/sxy*z(i)))./sqrt(cosTheta(aperture));
    fpropmat(:,:,i)=pupil;
end
clear pupil
fpropmat


%% spot width for lcos and mma
rl=.03; 
lcos=1.*(rr(s,'freq')<rl/2);
lcos2=1.*(sqrt((xx(s,'freq')-.05).^2+yy(s,'freq').^2)<rl/2);
%% define a stack of mma images that get gradually smoother
nline=4;
rm=1/(4*nline);
ns=[nline nline]; % divide into 4x4 regions
mma=newim([s ns],'dfloat');
if mod(nline,2)==0 % center the grid of disks on the center of bfp
    off=1/4-rm;
else
    off=rm*(nline-1);
end
for j=0:nline-1
    for i=0:nline-1
        mma(:,:,i,j)=((xx(s,'freq')-i/(nline*2)+off).^2 + (yy(s,'freq')-j/(2*nline)+off).^2)<rm^2;
    end
end
% overlay mma image and bfp diameter for inspection
mma_overlay=squeeze(sum(mma,[],[3 4]))+ ~aperture
%% make mosaic
reshape(permute(reshape(permute(mma,[2 1 3 4])+repmat(~aperture,[1 1 4 4]),[256 256*4 4]),[2 1 3]),[256*4 256*4])
%% for simplicity I use optimization toolbox and fit a gaussian (to the
%% sinc). one could also search for first minimum or something like that
b=abs(ft(squeeze(mma(:,:,0,0))));
bb=im2mat(squeeze(b(:,128)));
xpos=linspace(-128,127,256);
x= lsqcurvefit(@(x,xdata) x(2).*exp(-xdata.^2/x(1)^2),[7 3],xpos,bb);
plot(xpos,x(2).*exp(-xpos.^2/x(1)^2),xpos,bb)
% x(1) contains the spotwidth in pixels
%% spot size of mma in k-space, the smaller the mma, the less illumination
%% angles are needed for the incoherent image
rmk=2/(s(1)*pi*rm);
%abs(ft(mma))/max(abs(ft(mma)))-exp(-rr(s,'freq').^2/rmk^2);
rmk_pixels=x(1);%rmk*256;
%% reduce sampling of lcos image according to spot size generated by mma
%% aperture, illuminate pixels that contribute with 3% to the result
small_lcos=resample(lcos,[1/rmk_pixels 1/rmk_pixels],[0 0]);
ill_mask=small_lcos>.03;
ill_mask=bdilation(ill_mask,2); % to be sure everything will be illuminated, grow mask
% kx must have kxmax on the border
ill_kx=xx(ill_mask,'freq')*rmk_pixels;
ill_ky=yy(ill_mask,'freq')*rmk_pixels;

%% compare mask and scaled lcos image
overlay(255*small_lcos,~ill_mask)
%% parallel coherent illumination
coh=newim([s nline nline nz],'dfloat');
% ft of each of the mma images with different smoothness
kmma=dip_fouriertransform(mma.*repmat(aperture,[1 1 nline nline]),'forward',[1 1 0 0]);
%%
% multiply with lcos transmission, transform and filter in bfp
bfp=dip_fouriertransform(kmma.*repmat(lcos,[1 1 nline nline]),'forward',[1 1 0 0]).*repmat(aperture,[1 1 nline nline]);
for i=0:nz-1
    % defocused image in sample space for differentl mma masks
    coh(:,:,:,:,i)=abs(dip_fouriertransform(bfp.*...
            repmat(squeeze(fpropmat(:,:,i)),[1 1 nline nline]),...
            'forward',[1 1 0 0])).^2;
end
clear kmma bfp
%%
b=squeeze(coh(:,:,:,:,1));

reshape(permute(reshape(permute(reshape(b,[256 256 16]),[1 2 3]),[256 256*4*4]),[1 2]),[256*4 256*4])
%%
reshape(permute(reshape(mma,[256 256*4 4]),[2 1 3]),[256*4 256*4])

%% incoherent illumination
incoh=newim([s ns nz],'dfloat'); % sample space
lcos_incoh=newim([s ns],'dfloat'); % accumulates light in lcos plane
kmma=newim([s ns],'dcomplex'); % field on lcos
bfp=newim([s ns],'dcomplex'); % field in bfp
[row col]=size(ill_mask);
count=0;
all=sum(ill_mask);
for j=0:row-1
    for i=0:col-1
        if ill_mask(i,j)
            shifter=exp(1i*(ill_kx(i,j)*xx(s)+ill_ky(i,j)*yy(s)));
            kmma(:,:,:)=dip_fouriertransform(mma.*...
                repmat(aperture.*shifter,[1 1 ns]),'forward',[1 1 0]);
            lcos_incoh(:,:,:)=lcos_incoh(:,:,:)+abs(kmma(:,:,:)).^2;
            bfp(:,:,:)=dip_fouriertransform(kmma.*repmat(lcos,[1 1 ns]),...
                    'forward',[1 1 0]).*repmat(aperture,[1 1 ns]);
            for k=0:nz-1
                incoh(:,:,:,k)=squeeze(incoh(:,:,:,k))+...
                        abs(dip_fouriertransform(bfp.*...
                        repmat(squeeze(fpropmat(:,:,k)),[1 1 ns]),...
                        'forward',[1 1 0])).^2;
            end
            count=count+1;
            [count all]
        end
    end
end
clear bfp kmma shifter;

%%
permute(reshape(permute(incoh),[s(1) s(2) nz*ns]),[2 1 3])


%% For the next to run you need to do several simulations with different MMA
%% and LCOS images.
%% compare gauss and sharp edged mma hole
comp=reshape(gincoh/max(gincoh(:,:,0))-dincoh/max(dincoh(:,:,0)),[256 256*nz]);
out=255*(comp-min(comp))/(max(comp)-min(comp));
writeim(out,'/home/martin/1031/memi/disk-gauss-big.jpg','JPEG');
%%
mosaic=[reshape(gincoh,[256 256*nz]) reshape(dincoh,[256 256*nz])];
out=255*(mosaic-min(mosaic))/(max(mosaic)-min(mosaic));
writeim(out,...
    '/home/martin/1031/memi/gauss_disk.jpg'...
    ,'JPEG');
%% gaussian has only 60% of the intensity compared to disk
% with more sampling even only 56%
sum(gincoh(:,:,0))/sum(dincoh(:,:,0))